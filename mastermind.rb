# http://ruby.zigzo.com/2013/01/10/building-mastermind/

# game class
class Game
#   these are the possible colors
  COLORS = ["R", "G", "B", "Y", "O", "P"]
 
#  game class initializes computer & player classes
  def initialize
    @comp = Computer.new
    @player = Player.new
  end
 
#  10.times do because 10 chances
  def play
    10.times do |i|
      
#       i is the chance number
      puts "This is chance #{i+1} of 10"
      
#       current guess is what player typed in
      current_guess = @player.guess_code
      
#       standing is based on method evaluate guess with paramater current guess from above
      standing = evaluate_guess(current_guess)
 
#  if correct for all 4
      if standing[:exact].length == 4
#         display to user
        puts "You won!"
        return
      else
        puts "#{standing[:exact].length} Exact Matches"
        puts "#{standing[:near].length} Near Matches"
      end
    end
 
#  if reached end of loop, that means guesses out & not all perfectly matched

    # If we make it this far, we have used up 
    # all of our turns and lost.
    puts "You lost!"
    return
  end
 
  def evaluate_guess(current_guess)
    results = { :exact => [], :near => [] }
    current_guess.each_with_index do |choice, position|
      if exact_match?(choice, position)
        results[:exact] << true
      elsif near_match?(choice)
        results[:near] << true
      end
    end
    results
  end
  
=begin
	include?(p1) public
Returns true if the given object is present in self (that is, if any object == anObject), false otherwise.

a = [ "a", "b", "c" ]
a.include?("b")   #=> true
a.include?("z")   #=> false
=end  
 
#  near match means i think that the color code is in the correct answer
  def near_match?(choice)
    @comp.code_combination.include?(choice)
  end
 
#  exact means the choice & position matches the code combination
  def exact_match?(choice, position)
    choice == @comp.code_combination[position]
  end
end
 
class Computer
#   instance read only variable?
  attr_reader :code_combination
 
#  code combination is code generated by the method below
  def initialize
    @code_combination = code
  end
 
=begin
   shuffle(*args) public
Returns a new array with elements of this array shuffled.

a = [ 1, 2, 3 ]           #=> [1, 2, 3]
a.shuffle                 #=> [2, 3, 1]
=end

  def code
    colors = Game::COLORS.shuffle
    print colors
# empty array that will become the generated code
    generated_code = []
    
#     i think it 4 times will pop off the shuffled colors and add it to the end
#     of the generated code array
    4.times{ generated_code << colors.pop }
    generated_code
  end
end
 
class Player
  def guess_code
    puts 'What is your guess? Choose one of the following: "R", "G", "B", "Y", "O", "P"'
    converted_guess(gets.chomp)
  end
 
  def converted_guess(guess)
    guess.split('')
  end
end

# player = Player.new
# computer = Computer.new

game = Game.new
game.play